import pytest
from fortis.engine.vulnerability.default_flood import DefaultFloodFunction

@pytest.fixture
def default_flood_function(small_udf_buildings):
    return DefaultFloodFunction(
        buildings=small_udf_buildings, flood_type="CV"
    )


def test_apply_damage_percentages(default_flood_function, small_udf_buildings):
    # ARRANGE
    fields = small_udf_buildings.fields

    # ACT
    default_flood_function.apply_damage_percentages()

    # ASSERT
    assert small_udf_buildings.gdf[fields.bddf_id].notna().all(), (
        "Not all BDDF_ID values are populated."
    )

    assert (
        small_udf_buildings.gdf["BldgDmgPct"]
        .astype(float)
        .equals(round(small_udf_buildings.gdf["BuildingDamagePct"].astype(float), 6))
    ), "Building Damage Pct is not as expected"

    assert (
        small_udf_buildings.gdf["ContDmgPct"]
        .astype(float)
        .equals(round(small_udf_buildings.gdf["ContentDamagePct"].astype(float), 6))
    ), "Content Damage Pct is not as expected"

    """
    assert (
        small_udf_buildings.gdf["InvDmgPct"]
        .astype(float)
        .equals(round(small_udf_buildings.gdf["InventoryDamagePct"].astype(float), 6))
    ), "Inventory Damage Pct is not as expected"
    """
