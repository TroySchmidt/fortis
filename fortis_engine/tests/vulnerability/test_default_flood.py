import numpy as np
import pytest
import pandas as pd
import geopandas as gpd
#from fortis_engine.models.abstract_building_points import AbstractBuildingPoints
from fortis_engine.vulnerability.default_flood import DefaultFloodFunction

#class ConcreteBuildingPoints(AbstractBuildingPoints):
#    def gdf(self):
#        return self.data

@pytest.fixture
def default_flood_function(small_udf_buildings):
    return DefaultFloodFunction(buildings=small_udf_buildings, vulnerability_func=None, flood_type='CV')

def test_collect_damage_percentages(default_flood_function, small_udf_buildings):
    # ARRANGE
    
    # ACT
    default_flood_function.collect_damage_percentages()
    
    # ASSERT
    assert small_udf_buildings.gdf["BDDF_ID"].notna().all(), "Not all BDDF_ID values are populated."

    assert (small_udf_buildings.gdf["BldgDmgPct"].astype(float)
            .equals(round(small_udf_buildings.gdf["BuildingDamagePct"].astype(float),6))
           ), "Building Damage Pct is not as expected"
    
    assert (small_udf_buildings.gdf["ContDmgPct"].astype(float)
            .equals(round(small_udf_buildings.gdf["ContentDamagePct"].astype(float),6))
           ), "Content Damage Pct is not as expected"
    
    assert (small_udf_buildings.gdf["InvDmgPct"].astype(float)
            .equals(round(small_udf_buildings.gdf["InventoryDamagePct"].astype(float),6))
           ), "Inventory Damage Pct is not as expected"

def test_calculate_damage(default_flood_function):
    # Example test case for calculate_damage method
    hazard_intensity = 5.0
    expected_damage = 0.5  # Replace with the expected damage value based on your logic
    assert default_flood_function.calculate_damage(hazard_intensity) == expected_damage

def test_calculate_damage_zero_intensity(default_flood_function):
    # Test case for zero hazard intensity
    hazard_intensity = 0.0
    expected_damage = 0.0  # Replace with the expected damage value based on your logic
    assert default_flood_function.calculate_damage(hazard_intensity) == expected_damage

def test_calculate_damage_high_intensity(default_flood_function):
    # Test case for high hazard intensity
    hazard_intensity = 10.0
    expected_damage = 1.0  # Replace with the expected damage value based on your logic
    assert default_flood_function.calculate_damage(hazard_intensity) == expected_damage