import numpy as np
import pytest
import pandas as pd
import geopandas as gpd
from fortis_engine.models.building_points import BuildingPoints
from fortis_engine.vulnerability.default_flood import DefaultFloodFunction

@pytest.fixture
def default_flood_function(tmp_path):
    mock_data = """
        ID,Occupancy,FoundationType,NumStories,Depth_in_Struc,BDDF_ID,BDDF_ID_Expected,CDDF_ID,CDDF_ID_Expected,IDDF_ID,IDDF_ID_Expected,longitude,latitude,BuildingDamagePct_Expected,ContentDamagePct_Expected,InventoryDamagePct_Expected
        1413,RES3A,7,4,0.05607,,204,,81,,0,21.2859,-157.713,15.05607,12.672840,0
        1412,RES3C,7,4,101.386,,204,,81,,0,21.2859,-157.713,60,60,0
        60371,RES1,7,1,101.3791,,658,,488,,0,21.47374,-157.843,100,100,0
        12737,RES3E,7,1,2.064209,,204,,81,,0,21.28721,-157.826,25.192627,33.128418,0
        13224,RES3D,7,1,1.840573,,204,,81,,0,21.28874,-157.826,23.565157,31.565157,0
        62075,RES3B,7,3,0.588979,,204,,81,,0,21.41755,-157.792,15.588979,19.067748,0
        3056,GOV1,7,4,101.387,,631,,472,,0,21.2859,-157.713,98,100,0
        37309,IND2,7,1,101.382,,559,,384,,81,21.23167,-158.117,66,81,85
        16968,COM1,7,1,101.377,,217,,90,,1,21.3081,-157.866,80,94,98
        75749,AGR1,7,1,1.667157,,616,,460,,116,21.38033,-157.992,9.335785,35.344611,41.678925
    """
    file_path = tmp_path / "test_data.csv"
    file_path.write_text(mock_data)
    bp = BuildingPoints(data_source=str(file_path), file_type='csv')
    return DefaultFloodFunction('RISK-UE', bp, 'CV')

def test_collect_damage_percentages(default_flood_function):
    # ARRANGE
    
    # ACT
    default_flood_function.collect_damage_percentages()
    results_no_geom = default_flood_function.building_points.data.drop(columns="geometry")
    #results_no_geom.to_csv(tmp_path / "test_results.csv", index=False)

    # ASSERT
    assert default_flood_function.building_points.data["BDDF_ID_Expected"].astype('int64').equals(results_no_geom["BDDF_ID"].astype('int64')), "BDDF ID is not as expected"
    assert default_flood_function.building_points.data["CDDF_ID_Expected"].astype('int64').equals(results_no_geom["CDDF_ID"].astype('int64')), "CDDF ID is not as expected"
    assert default_flood_function.building_points.data["IDDF_ID_Expected"].astype('int64').equals(results_no_geom["IDDF_ID"].astype('int64')), "IDDF ID is not as expected"

    assert (default_flood_function.building_points.data["BuildingDamagePct_Expected"].astype(float)
            .equals(round(results_no_geom["BuildingDamagePct"].astype(float),6))
           ), "Building Damage Pct is not as expected"
    
    assert (default_flood_function.building_points.data["ContentDamagePct_Expected"].astype(float)
            .equals(round(results_no_geom["ContentDamagePct"].astype(float),6))
           ), "Content Damage Pct is not as expected"
    
    assert (default_flood_function.building_points.data["InventoryDamagePct_Expected"].astype(float)
            .equals(round(results_no_geom["InventoryDamagePct"].astype(float),6))
           ), "Inventory Damage Pct is not as expected"

def test_calculate_damage(default_flood_function):
    # Example test case for calculate_damage method
    hazard_intensity = 5.0
    expected_damage = 0.5  # Replace with the expected damage value based on your logic
    assert default_flood_function.calculate_damage(hazard_intensity) == expected_damage

def test_calculate_damage_zero_intensity(default_flood_function):
    # Test case for zero hazard intensity
    hazard_intensity = 0.0
    expected_damage = 0.0  # Replace with the expected damage value based on your logic
    assert default_flood_function.calculate_damage(hazard_intensity) == expected_damage

def test_calculate_damage_high_intensity(default_flood_function):
    # Test case for high hazard intensity
    hazard_intensity = 10.0
    expected_damage = 1.0  # Replace with the expected damage value based on your logic
    assert default_flood_function.calculate_damage(hazard_intensity) == expected_damage